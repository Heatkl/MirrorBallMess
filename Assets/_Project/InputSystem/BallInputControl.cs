//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Project/InputSystem/BallInputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BallInputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BallInputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BallInputControl"",
    ""maps"": [
        {
            ""name"": ""BallMap"",
            ""id"": ""2ff82279-88ac-445d-a8bd-4632f37ba69b"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""688eaee0-f829-4625-b5d0-f8181bedac86"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseShoot"",
                    ""type"": ""Button"",
                    ""id"": ""8480f536-8f16-4f44-a03b-a1029e42245a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorLock"",
                    ""type"": ""Button"",
                    ""id"": ""25d73a67-9e42-4ea5-b9c3-43f8c2a40a6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnstoppableShoot"",
                    ""type"": ""Button"",
                    ""id"": ""2c5bc6ae-30a6-49c9-9f39-951076709662"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f844ad2-82cc-44a9-9fbe-e8bf4cb17015"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0072125-b80c-4895-826b-cae33d770285"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MouseShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f398f48d-cc17-4aa4-8a52-2c099915b5f9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""CursorLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""157f3366-9d70-44b2-82f1-e87a49a2cdd5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""UnstoppableShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BallMap
        m_BallMap = asset.FindActionMap("BallMap", throwIfNotFound: true);
        m_BallMap_MouseMove = m_BallMap.FindAction("MouseMove", throwIfNotFound: true);
        m_BallMap_MouseShoot = m_BallMap.FindAction("MouseShoot", throwIfNotFound: true);
        m_BallMap_CursorLock = m_BallMap.FindAction("CursorLock", throwIfNotFound: true);
        m_BallMap_UnstoppableShoot = m_BallMap.FindAction("UnstoppableShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BallMap
    private readonly InputActionMap m_BallMap;
    private List<IBallMapActions> m_BallMapActionsCallbackInterfaces = new List<IBallMapActions>();
    private readonly InputAction m_BallMap_MouseMove;
    private readonly InputAction m_BallMap_MouseShoot;
    private readonly InputAction m_BallMap_CursorLock;
    private readonly InputAction m_BallMap_UnstoppableShoot;
    public struct BallMapActions
    {
        private @BallInputControl m_Wrapper;
        public BallMapActions(@BallInputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_BallMap_MouseMove;
        public InputAction @MouseShoot => m_Wrapper.m_BallMap_MouseShoot;
        public InputAction @CursorLock => m_Wrapper.m_BallMap_CursorLock;
        public InputAction @UnstoppableShoot => m_Wrapper.m_BallMap_UnstoppableShoot;
        public InputActionMap Get() { return m_Wrapper.m_BallMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallMapActions set) { return set.Get(); }
        public void AddCallbacks(IBallMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BallMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallMapActionsCallbackInterfaces.Add(instance);
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
            @MouseShoot.started += instance.OnMouseShoot;
            @MouseShoot.performed += instance.OnMouseShoot;
            @MouseShoot.canceled += instance.OnMouseShoot;
            @CursorLock.started += instance.OnCursorLock;
            @CursorLock.performed += instance.OnCursorLock;
            @CursorLock.canceled += instance.OnCursorLock;
            @UnstoppableShoot.started += instance.OnUnstoppableShoot;
            @UnstoppableShoot.performed += instance.OnUnstoppableShoot;
            @UnstoppableShoot.canceled += instance.OnUnstoppableShoot;
        }

        private void UnregisterCallbacks(IBallMapActions instance)
        {
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
            @MouseShoot.started -= instance.OnMouseShoot;
            @MouseShoot.performed -= instance.OnMouseShoot;
            @MouseShoot.canceled -= instance.OnMouseShoot;
            @CursorLock.started -= instance.OnCursorLock;
            @CursorLock.performed -= instance.OnCursorLock;
            @CursorLock.canceled -= instance.OnCursorLock;
            @UnstoppableShoot.started -= instance.OnUnstoppableShoot;
            @UnstoppableShoot.performed -= instance.OnUnstoppableShoot;
            @UnstoppableShoot.canceled -= instance.OnUnstoppableShoot;
        }

        public void RemoveCallbacks(IBallMapActions instance)
        {
            if (m_Wrapper.m_BallMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BallMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallMapActions @BallMap => new BallMapActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    public interface IBallMapActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
        void OnMouseShoot(InputAction.CallbackContext context);
        void OnCursorLock(InputAction.CallbackContext context);
        void OnUnstoppableShoot(InputAction.CallbackContext context);
    }
}
